name: "Deploy Pipeline"

on:
  push:
  workflow_dispatch:

env:
  SANITY_STUDIO_PROJECT_ID: ${{ vars.SANITY_STUDIO_PROJECT_ID }}
  SANITY_STUDIO_DATASET: ${{ vars.SANITY_STUDIO_DATASET }}
  SANITY_STUDIO_API_VERSION: ${{ vars.SANITY_STUDIO_API_VERSION }}

jobs:
  sync-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    name: Terraform Sync
    env:
      TF_VAR_cloudflare_account_id: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_project_name_prefix: ${{ vars.CLOUDFLARE_PROJECT_NAME_PREFIX }}
      TF_VAR_cloudflare_domain: ${{ vars.CLOUDFLARE_DOMAIN }}
      TF_VAR_sanity_preview_secret: ${{ secrets.SANITY_PREVIEW_SECRET }}
      TF_VAR_sanity_api_read_token: ${{ secrets.SANITY_API_READ_TOKEN }}
      TF_VAR_sanity_studio_project_id: ${{ vars.SANITY_STUDIO_PROJECT_ID }}
      TF_VAR_sanity_studio_dataset: ${{ vars.SANITY_STUDIO_DATASET }}
      TF_VAR_sanity_studio_api_version: ${{ vars.SANITY_STUDIO_API_VERSION }}
      TF_VAR_github_pat: ${{ secrets.GITHUB_PAT}}
    outputs:
      CF_PROJ_NAME_PROD: ${{ steps.output.outputs.cf_proj_name_prod }}
      CF_PROJ_NAME_PREVIEW: ${{ steps.output.outputs.cf_proj_name_preview }}
      PRODUCTION_URL: ${{ steps.output.outputs.production_url }}
      ADMIN_URL: ${{ steps.output.outputs.admin_url }}
    defaults:
      run:
        working-directory: ./tf
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        if: github.ref != 'refs/heads/main' || github.event_name != 'push'
        run: terraform plan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
      - name: Get Terraform Outputs and feed to other steps
        id: output
        run: |
          echo "admin_url=$(terraform output -raw admin_url)" >> "$GITHUB_OUTPUT"
          echo "production_url=$(terraform output -raw production_url)" >> "$GITHUB_OUTPUT"
          echo "cf_proj_name_prod=$(terraform output -raw cf_proj_name_prod)" >> "$GITHUB_OUTPUT"
          echo "cf_proj_name_preview=$(terraform output -raw cf_proj_name_preview)" >> "$GITHUB_OUTPUT"

  publish-preview:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    name: Publish Preview Build
    needs: [sync-backend]
    env:
      SANITY_PRODUCTION_URL: ${{ needs.sync-backend.outputs.PRODUCTION_URL }}
      SANITY_STUDIO_ENABLED: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Build
        run: pnpm i && pnpm run build
      - name: Publish Preview Build to Cloudflare
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ needs.sync-backend.outputs.CF_PROJ_NAME_PREVIEW }}
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: "3"

  publish-production:
    runs-on: ubuntu-latest
    needs: [sync-backend, publish-preview]
    permissions:
      contents: read
      deployments: write
    name: Publish Production Build
    env:
      SANITY_PRODUCTION_URL: ${{ needs.sync-backend.outputs.PRODUCTION_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Build
        run: pnpm i && pnpm build
      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ needs.sync-backend.outputs.CF_PROJ_NAME_PROD }}
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          wranglerVersion: "3"
      - name: Full Cloudflare Cache Purge
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ needs.sync-backend.outputs.ADMIN_URL }}/api/revalidate
          method: "DELETE"
          customHeaders: '{"sanity-webhook-signature": "${{ secrets.SANITY_PREVIEW_SECRET }}"}'
